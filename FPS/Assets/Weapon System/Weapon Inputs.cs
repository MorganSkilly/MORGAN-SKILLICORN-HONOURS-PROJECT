//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Weapon System/Weapon Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WeaponActionsMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WeaponActionsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Weapon Inputs"",
    ""maps"": [
        {
            ""name"": ""WeaponSystem"",
            ""id"": ""afbf49e1-0b0b-4fbc-b84e-90b92f9bdf91"",
            ""actions"": [
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""f4260463-908c-42b5-85eb-4aba2c72f362"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""6aebfcee-5523-4a5e-a038-feea946b262b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap"",
                    ""type"": ""Value"",
                    ""id"": ""e5fabbf2-4918-4912-8e0f-a6eb1d028e59"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""6aec288d-e677-4cf5-a86f-c00256e5f5a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""58d20ec5-ef94-4a12-875e-df50f5dc77b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9fcf73ff-7761-471c-81aa-e1f3c4136940"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2605c6e8-6f20-4559-ab24-4ff44127aea4"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""485f20c7-9b4d-4cc5-bbbf-00e7da44eef8"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e03e332d-7482-4edf-9695-dc6d3fab1761"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd84cad6-cd46-4ed5-9063-67bf8f0e67a4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WeaponSystem
        m_WeaponSystem = asset.FindActionMap("WeaponSystem", throwIfNotFound: true);
        m_WeaponSystem_Primary = m_WeaponSystem.FindAction("Primary", throwIfNotFound: true);
        m_WeaponSystem_Secondary = m_WeaponSystem.FindAction("Secondary", throwIfNotFound: true);
        m_WeaponSystem_Swap = m_WeaponSystem.FindAction("Swap", throwIfNotFound: true);
        m_WeaponSystem_Fire = m_WeaponSystem.FindAction("Fire", throwIfNotFound: true);
        m_WeaponSystem_Aim = m_WeaponSystem.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WeaponSystem
    private readonly InputActionMap m_WeaponSystem;
    private IWeaponSystemActions m_WeaponSystemActionsCallbackInterface;
    private readonly InputAction m_WeaponSystem_Primary;
    private readonly InputAction m_WeaponSystem_Secondary;
    private readonly InputAction m_WeaponSystem_Swap;
    private readonly InputAction m_WeaponSystem_Fire;
    private readonly InputAction m_WeaponSystem_Aim;
    public struct WeaponSystemActions
    {
        private @WeaponActionsMap m_Wrapper;
        public WeaponSystemActions(@WeaponActionsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primary => m_Wrapper.m_WeaponSystem_Primary;
        public InputAction @Secondary => m_Wrapper.m_WeaponSystem_Secondary;
        public InputAction @Swap => m_Wrapper.m_WeaponSystem_Swap;
        public InputAction @Fire => m_Wrapper.m_WeaponSystem_Fire;
        public InputAction @Aim => m_Wrapper.m_WeaponSystem_Aim;
        public InputActionMap Get() { return m_Wrapper.m_WeaponSystem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponSystemActions set) { return set.Get(); }
        public void SetCallbacks(IWeaponSystemActions instance)
        {
            if (m_Wrapper.m_WeaponSystemActionsCallbackInterface != null)
            {
                @Primary.started -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnPrimary;
                @Primary.performed -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnPrimary;
                @Primary.canceled -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnPrimary;
                @Secondary.started -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnSecondary;
                @Secondary.performed -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnSecondary;
                @Secondary.canceled -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnSecondary;
                @Swap.started -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnSwap;
                @Swap.performed -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnSwap;
                @Swap.canceled -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnSwap;
                @Fire.started -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnFire;
                @Aim.started -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_WeaponSystemActionsCallbackInterface.OnAim;
            }
            m_Wrapper.m_WeaponSystemActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Secondary.started += instance.OnSecondary;
                @Secondary.performed += instance.OnSecondary;
                @Secondary.canceled += instance.OnSecondary;
                @Swap.started += instance.OnSwap;
                @Swap.performed += instance.OnSwap;
                @Swap.canceled += instance.OnSwap;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }
        }
    }
    public WeaponSystemActions @WeaponSystem => new WeaponSystemActions(this);
    public interface IWeaponSystemActions
    {
        void OnPrimary(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
        void OnSwap(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
